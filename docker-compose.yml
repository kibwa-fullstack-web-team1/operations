version: '3.8'

services:
  daily-question-service:
    container_name: daily-question-service
    build:
      context: ../  # 프로젝트 루트 디렉토리를 빌드 컨텍스트로 사용
      dockerfile: daily-question-service/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=${DATABASE_URL} # .env 파일에서 로드
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - USER_SERVICE_URL=http://user-service:8000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - VOICE_ANALYSIS_SERVICE_URL=http://voice-analysis-service:8003
    depends_on:
      - user-service # DB 의존성 제거, user-service에만 의존
    networks:
      - app-network

  user-service:
    container_name: user-service
    build:
      context: ../  # 프로젝트 루트 디렉토리를 빌드 컨텍스트로 사용
      dockerfile: user-service/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL} # .env 파일에서 로드
    networks:
      - app-network

  voice-analysis-service:
    container_name: voice-analysis-service
    build:
      context: ../
      dockerfile: voice-analysis-service/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - TF_SERVING_URL=${TF_SERVING_URL}
    networks:
      - app-network

  notification-service:
    container_name: notification-service
    build:
      context: ../
      dockerfile: notification-service/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - AWS_SES_SNS_ACCESS_KEY_ID=${AWS_SES_SNS_ACCESS_KEY_ID}
      - AWS_SES_SNS_SECRET_ACCESS_KEY=${AWS_SES_SNS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    networks:
      - app-network

  # Kafka 클러스터의 메타데이터를 관리하고 분산 코디네이션을 제공합니다.
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  # 메시지 큐 시스템인 Apache Kafka 브로커입니다.
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
